database + 프로그램개발
=> JAVA : 웹 개발

1. 컴파일러 설치 : 17 JDK 설치
		자바 언어를 번역해서 컴퓨터가 이해할 수 있는 언어로 변경
		자바=>ORACLE소유
			
2. EDITOR -> eclipse(자바전용에디터, 플러그인을 붙이면 무거워지는 단점), intelliJ(가장 편하지만 유료), vscode(마소가밀고있는 에디터, 확장프로그램이 많음) 


git : 리눅스 운영체제를 만든 리눅스 토발즈가 만든 프로그램
	리눅스 => 기업용 서버의 대부분의 운영체제로 사용됨
	컴퓨터 파일의 변경사항 추적하고 여러 사람들 간 파일 공유 //git : 분산버전관리시스템 //
	(
	git init => 현재 폴더를 로컬 저장소로 사용하겠음.// 현재 폴더를 관리해줘//
	git add . => 현재 폴더안의 모든 파일을 관리를 하기 위해서 stage 영역으로 올려줘 //. = 모든파일 //
	 unstage 영역 / stage 영역
	git commit -m "메세지" => stage 영역에 있는 파일을 로컬 저장소로 이동 //로컬 관리//

	git remote add origin 깃헙저장소주소 => 로컬 저장소와 원격저장소 연동하기
	git push -u orgin main  =>로컬 저장소 내용을 원격저장소로 복사 붙여넣기
	) 가장 처음에 git 설정한것들.

	git push

	.gitignore : 관리하지 않을 파일들 기록
			https://www.toptal.com/developers/gitignore //파일 작성 편하게 도와줌


1. git 설치
2. github 회원가입

git init
gitignore 작성
git add 관리할 파일들
git commit -m "ch1프로젝트 작성"
git push -u origin main


git add Remote 선택
github 주소 붙여넣기
origin
vs code Publish Branch 클릭


컴파일러(자바) - 인터프리터(파이썬)
객체지향언어(자바)


자바 기본단위 => 클래스 (class)
ch1 => 패키지 (관련있는 클래스들 모음)
main = 메소드 // 이름 () => 메소드

//클래스 이름은 대문자로 시작

타입(자료형) 변수명(소문자로 시작/두 개의 단어가 합해진 변수명은 두번째 단어 시작을 대문자로 함) // DB에서는 단어_단어 // 변수 이름은 중복 불가능
1. 정수형 - byte(1byte), short(2byte), int(4byte), long(8byte)
   기본적으로 int

2. 문자형 - char(2byte)
   문자를 표현할때 '' 사용
   문자(한 글자) - 문자열(한글자이상)
   문자는'' 사용, 문자열은 " " 사용
   char var1 = '\u0041'; // 아스키코드의 65번에 해당하는 대문자 A
   char var2 = 44032;
   문자에는 코드값이 정의 되어 있음 = 유니코드, 아스키코드, UTF-8
   A = 65, a = 97, 0 = 48 영어는 26
   char name1 = "Ja"; 타입 미스매칭 
   String name2 = "Ja"; // 문자열에서는 String "" 사용


3. 논리형 - boolean (true, false 값만 가짐)

4. 실수형 - float(4byte), double(8byte)
float 소수점 9자리에서 반올림
double 정밀도가 더 높음

자바 코드(src폴더) => 컴파일링 => bin(바이너리)파일의 .class로 저장됨

 특수문자
   탭 == \t, 엔터 == \n
   "" == " \" \" "
   '' == " \' \' "

 변수의 유효 범위
 local(지역) 변수 {} : {}블럭 안에서만 유효함 / 초기화를 하고 사용함
 변수 선언 => 값을 할당(초기화)

 자동 형(타입)변환
 정수형 / 문자형 / 실수형 / 논리형
 타입 변환이 가능함 : 작은 타입에서 => 큰 타입으로 (byte기준) ,동일한 4byte 지만 float타입이 int 보다 더 정밀한 수를 표현함.







 printf 지시자  enter 개념이 안들어있음.
 %d : 10진 정수 형태로 출력
 %b : boolean 형태로 출력
 %c : char 형태로 출력
 %s : String(문자열) 형태로 출력
 %f : 부동소수점(float, double) 형태로 출력
 %숫자 : 총 자릿수 / @ 오른쪽 정렬 출력 / 0@ 없는 자리는 0으로 채워서


자바 예약어
기본 데이터 타입 boolean, byte, char, short, int, long, float, double

접근 지정자 Private, protected, public

클래스와 관련된 것 class, abstract, interface, extends, implements, enum

객체와 관련된 것 new, instanceof, this, super, null

메소드와 관련된 것 void, return

제어문과 관련된 것 if, else, switch, case, default, for, do, while, break, continue

논리값 true, false

예외 처리와 관련된 것 try, catch, finally, throw, throws

기타 transient, volatile, package, import, synchronized, native, final, static, strictfp, assert




지역변수 : 메소드 종료후 소멸
	for, if => {} 블럭 내부에 선언된 변수는 블럭을 벗어나는 경우 소멸

인스턴스변수 : 인스턴스마다 다른 값 저장 가능
		참조변수가 없을 때 가비지컬렉터에 의해 자동 제거됨
		인스턴스 생성 시( = new ~)

클래스 변수 : 클래스가 로딩될 때(클래스문을 생성했을 때) 생성되고 프로그램이 종료될 때 소멸


 오버로딩
- 하나의 클래스에 동일한 이름으로 존재
- () 안에 인자의 개수, 타입이 달라야 함

생성자 오버로딩
메소드 오버로딩
리턴타입 
1. 기본형 : int, char, boolean, double, ...;
2. 참조형 : 배열, 클래스, (주소값을 가지고있는 친구들, sout을 치면 주소값을 뱉어냄)



상속 : 기존의 클래스를 재사용하여 새로운 클래스 작성
     적은 양의 코드로 새로운 클래스를 작성할 수 있고 코드를 공통적으로 관리하기 때문에 코드의 추가 및 변경이 용이함.
     => 코드의 재사용성 증가 및 중복제거
     자손 클래스는 조상 클래스의 모든 멤버를 상속받음
     생성자와 초기화 블럭은 상속되지 않음
     오버라이딩 : 부모의 메소드와 동일한 시그니처(리턴타입, 메소드명, 인자)를 가진다.
     오버라이딩 메소드는 부모보다 접근 제한자를 좁게 가져서는 안됨
     새로운 예외를 throws 할 수 없음
     부모클래스와 똑같은 메소드를 만들어내는것
     부모 메소드 재정의

 -부모의 역할을 할 수 있는 애들
1. 클래스
2. 인터페이스
3. 추상클래스


extends



// 접근 제어자 - 클래스, 멤버변수, 메소드, 생성자 // 지역변수에는 못붙임
// private : 같은 클래스 내에서만 접근 가능
// default : 같은 패키지 내에서만 접근 가능
// protected : 같은 패키지, 다른 패키지의 자손 클래스
// public : 접근 제한 없음

// 대상에 따라 사용할 수 있는 접근 제어자
// 클래스 - public or default
// 메소드, 멤버변수 -  private, default, protected, public



다형성, 추상클래스

클래스
상속 - 부모(클래수, 추상클래스, 인터페이스)

Exception (예외)
1) 컴파일 예외
2) 런타임 예외









ctrl + shift + p
shift + Alt + 아래키 : 지금 코드 복사
